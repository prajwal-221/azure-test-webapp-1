# azure-pipelines.yml
trigger:
  branches:
    include:
      - main

pool:
  name: Default         # Your self‑hosted pool (or use vmImage: ubuntu-latest if you have hosted parallelism)

variables:
  azureSubscription: 'AzureSP‑Demo'     # Name of your ARM service connection in DevOps
  resourceGroup: 'web-demo-rg'          # RG where your App Service lives
  appName: 'HelloWorldApp'              # Exact name of your existing App Service
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: 'Build & Publish'
  jobs:
  - job: BuildJob
    displayName: 'Build .NET 8 App'
    steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
        displayName: 'Install .NET 8 SDK'

      - script: |
          dotnet restore HelloWorldApp.csproj
          dotnet build HelloWorldApp.csproj --configuration $(buildConfiguration)
          dotnet publish HelloWorldApp.csproj --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish
        displayName: 'Restore, Build & Publish'

      - publish: $(Build.ArtifactStagingDirectory)/publish
        artifact: drop
        displayName: 'Publish Artifact'

- stage: Deploy
  displayName: 'Deploy to App Service'
  dependsOn: Build
  jobs:
  - deployment: DeployWeb
    displayName: 'Deploy Artifact'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: drop
              displayName: 'Download Build Artifact'

            - task: AzureWebApp@1
              displayName: 'Deploy to App Service'
              inputs:
                azureSubscription: $(azureSubscription)
                appType: 'webApp'               # or 'webAppLinux' if your App Service is Linux
                resourceGroupName: $(resourceGroup)
                appName: $(appName)
                package: $(Pipeline.Workspace)/drop/publish
